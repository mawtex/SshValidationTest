@inherits RazorFunction
@using Composite.Forms.FormBuilder

@functions {
    public override string FunctionDescription
    {
        get { return "A checkbox list selector control."; }
    }

    [FunctionParameter(Label = Localization.Constants.Fields_Parameters_Name_Label, Help = Localization.Constants.Fields_Parameters_Name_Help, DefaultValue = null)]
    public string Name { get; set; }

    [FunctionParameter(Label = Localization.Constants.Fields_Parameters_Label_Label, Help = Localization.Constants.Fields_Parameters_Label_Help)]
    public string Label { get; set; }

    [FunctionParameter(Label = Localization.Constants.Fields_Parameters_Help_Label, DefaultValue = null, Help = Localization.Constants.Fields_Parameters_Help_Help, WidgetFunctionName = "Composite.Widgets.String.TextArea")]
    public string Help { get; set; }

    [FunctionParameter(Label = Localization.Constants.Fields_Parameters_Required_Label, DefaultValue = false, Help = Localization.Constants.Fields_Parameters_Required_Help)]
    public bool Required { get; set; }

    [FunctionParameter(Label = Localization.Constants.Fields_Selectors_Options_Label, DefaultValue = "Item 1\nItem 2", Help = Localization.Constants.Fields_Selectors_Options_Help, WidgetFunctionName = "Composite.Widgets.String.TextArea")]
    public string Options { get; set; }

    [FunctionParameter(Label = Localization.Constants.Fields_Selectors_Inline_Label, DefaultValue = false, Help = Localization.Constants.Fields_Selectors_Inline_Help)]
    public bool Inline { get; set; }
}

@{
    Name = string.IsNullOrEmpty(Name) ? Label : Name;
    string requiredClass = Required ? "required" : "";

    var formContext = FormHelper.GetFormContext();
    string clientId = formContext.BuildFieldClientId(Name);

    string[] options = Options.Replace("\r\n", "\n").Replace("\r", "\n").Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);

    var selectedValues = new HashSet<string>();

    if (formContext.IsFormSubmit)
    {
        string selectedValue = Request[clientId];

        formContext.Result.Add(Name, Label, typeof(string), selectedValue);

        foreach (var v in (selectedValue ?? "").Split(new[] { ',' }))
        {
            selectedValues.Add(v);
        }

        // Validation

        if (Required && string.IsNullOrEmpty(selectedValue))
        {
            formContext.Errors.Raise(string.Format(Resources.FormBuilder.ServerValidation_FieldRequired, Label));
        }
    }

    Func<string, string> clientIdFunc = option => clientId + option.GetHashCode();
}
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
</head>
<body>
    <div class="form-group @clientId @requiredClass">
        <label class="control-label input-group">
            @Label @if (Required)
            { <abbr title="@Resources.FormBuilder.WCAG_required"></abbr> }
        </label>
        @foreach (var option in options)
        {
            if (!Inline)
            {
                <div class="checkbox">
                    <label for="@clientIdFunc(option)">
                        <input type="checkbox"
                               id="@clientIdFunc(option)"
                               name="@clientId"
                               value="@option"
                               required="@(Required ? "required" : null)"
                               @if (selectedValues.Contains(option)) { <text> checked="checked" </text>   } />
                        @option
                    </label>
                </div>
            }
            else
            {
                <label for="@clientIdFunc(option)" class="checkbox-inline">
                    <input type="checkbox"
                           id="@clientIdFunc(option)"
                           name="@clientId"
                           value="@option"
                           required="@(Required ? "required" : null)"
                           @if (selectedValues.Contains(option)) { <text> checked="checked" </text>    } />
                    @option
                </label>
            }
        }
        @if (!string.IsNullOrWhiteSpace(Help))
        {
            <p class="help-block">@Help</p>
        }
    </div>

</body>
</html>

